<!doctype html>
<html>
  <head>
    <title>BLE devices & Spotify</title>

    <style type="text/css">
      .noborder, .noborder tr, .noborder th, .noborder td {
        border: none;
      }
      li {
        height: 20px;
      }
      .body {
          margin-top: 50px;
          margin-left: 20px;
      }

    </style>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css">
    <link rel="stylesheet" href="https://cdn.rawgit.com/milligram/milligram/master/dist/milligram.min.css">
  </head>

  <body class='body'>
    <h1>BLE devices & Spotify</h1>
    <table>
      <tr>
        <td>
          <h2>User information</h2>
        </td>
        <td colspan="2">
          <h2>Now playing</h2>
        </td>
      </tr>
      <tr>
        <td width="45%">
          <ul style="list-style: none;">
            <li><b>Your name: </b><%= name %></li>
            <li><b>Session: </b><%= session_token %></li>
          </ul>
        </td>
        <td id="song-cover" rowspan="3" width="15%">&nbsp;</td>
        <td width="40%">
          <ul style="list-style: none;">
            <li id="song-name"><b>Title: </b></li>
            <li id="song-artists"><b>Artist(s): </b></li>
            <li id="song-album"><b>Album: </b></li>
          </ul>
        </td>
      </tr>
    </table>
    <p id="instructions">Please turn on Bluetooth on your device and add your personal Thingy.</p>
    <input id="button-add-thingy" type='button' value='Add Thingy'>
    <table id="bluetooth-devices-table">
      <tr><th style="width:5%;">&nbsp;</th><th style="width:40%;">Name</th><th style="width:55%;">Address</th></tr>
    </table>

    <script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.1/handlebars.min.js"></script>
    <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.1/socket.io.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/notify/0.4.2/notify.js"></script>
    <script>
      var serverSocket;
      var ioServer, ioMain;
      var sessionToken = "<%= session_token %>";
      var devicesThingy = [];

      (function() {

        /**
         * Obtains parameters from the hash of the URL
         * @return Object
         */
        function getHashParams() {
          var hashParams = {};
          var e, r = /([^&;=]+)=?([^&;]*)/g,
              q = window.location.hash.substring(1);
          while ( e = r.exec(q)) {
             hashParams[e[1]] = decodeURIComponent(e[2]);
          }
          return hashParams;
        }

        var params = getHashParams();

        // websockets
        ioServer = io.connect("http://localhost:7777");

        // get the host's socketID
        ioServer.on("main_socket", function(data){
          ioMain = data.socket;
          console.log(ioMain);
          ioServer.emit("addPartyUser", {socket: ioMain, name: "<%= name %>"});
        });

        // get the updated data regarding the current track
        ioServer.on("update_party_user", function(data){
          document.getElementById('song-cover').innerHTML = "<img src=" + data.cover + " height='100' width='100'>";
          document.getElementById('song-name').innerHTML = "<b>Title: </b>" + data.name;
          document.getElementById('song-artists').innerHTML = "<b>Artist(s): </b>" + data.artists;
          document.getElementById('song-album').innerHTML = "<b>Album: </b>" + data.album;
          shaken = false;
          pressed = false;
        });

        // if the linked hosts has disconnected
        ioServer.on("main_user_disconnected", function(data){
          alert("Main user disconnected.");
          window.location.href = "/";
        });

        // if someone tries to vote while the party mode is disabled
        ioServer.on("party_mode_disabled", function(data){
          $.notify("The party host disabled the party mode.", {className: "error", autoHide: true, autoHideDelay: 3000});
        });

        // request the socketID of the linked host
        ioServer.emit("request_main_socket", sessionToken);

        document.getElementById('button-add-thingy').addEventListener('pointerup', function(event){
          addThingy(document.getElementById('bluetooth-devices-table'));
        });

      })();

      // shorten strings if they're too long to be displayed
      function sliceNowPlaying(str){
        if(str.length >= 40){
          return (str.slice(0,37) + "...");
        } else {
          return str;
        }
      }

      // add a new Thingy
      function addThingy(table){
        navigator.bluetooth.requestDevice({filters: [{namePrefix:"Thingy"}],
                                          optionalServices: [
                                            "ef680200-9b35-4933-9b10-52ffa9740042",
                                            "ef680300-9b35-4933-9b10-52ffa9740042",
                                            "ef680500-9b35-4933-9b10-52ffa9740042",
                                            "ef680400-9b35-4933-9b10-52ffa9740042"
                                          ]})
        .then(device => {
          if(devicesThingy.length == 0){
            thingyScenario(device);
            devicesThingy.push(device);
            insertRow(table, device);
            thingyWriteLEDColorConstant(device, [255,88,50]);
            document.getElementById('instructions').innerHTML = "If you don't enjoy the current track, please give your Thingy a shake. If you enjoy it, push the button for 1 second."
          }
        });
      }

      function insertRow(table, device){
        var tr = table.insertRow(table.rows.length);
        var n = tr.insertCell(0);
        var name = tr.insertCell(1);
        var addr = tr.insertCell(2);

        name.innerHTML = device.name;
        addr.innerHTML = device.id;
      }

      // Thingy's Bluetooth characteristics and services (notifications)
      let paramThingy = [
        // Temperature
        {
          serviceUUID: "ef680200-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680201-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Temperature",
          characteristicUnit: "Â°"
        },
        // Pressure
        {
          serviceUUID: "ef680200-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680202-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Pressure",
          characteristicUnit: "hPa"
        },
        // Humidity
        {
          serviceUUID: "ef680200-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680203-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Humidity",
          characteristicUnit: "%"
        },
        // Gas: eCO2
        {
          serviceUUID: "ef680200-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680204-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Gas (eCO2)",
          characteristicUnit: "ppm"
        },
        // Gas: TVOC
        {
          serviceUUID: "ef680200-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680204-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Gas (TVOC)",
          characteristicUnit: "ppb"
        },
        // Color
        {
          serviceUUID: "ef680200-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680205-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Color",
          characteristicUnit: ""
        },
        // Button
        {
          serviceUUID: "ef680300-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef680302-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Button",
          characteristicUnit: ""
        },
        // Gravity vector
        {
          serviceUUID: "ef680400-9b35-4933-9b10-52ffa9740042",
          characteristicUUID: "ef68040a-9b35-4933-9b10-52ffa9740042",
          characteristicName: "Gravity vector",
          characteristicUnit: ""
        }
      ];


      // add a thingy
      function thingyScenario(device){
        // Button
        device.gatt.connect()
        .then(server => {
          return server.getPrimaryService(paramThingy[6].serviceUUID);
        })
        .then(service => {
          return service.getCharacteristic(paramThingy[6].characteristicUUID);
        })
        .then(characteristic => {
          var myCharacteristic = characteristic;
          return myCharacteristic.startNotifications().then(_ => {
            myCharacteristic.addEventListener('characteristicvaluechanged',
                function(event){
                  thingyHandleNotifications(event, paramThingy[6].characteristicName);
                });
          });
        })
        .catch(error => {
          console.log(error);
        });

        // Gravity vector
        device.gatt.connect()
        .then(server => {
          return server.getPrimaryService(paramThingy[7].serviceUUID);
        })
        .then(service => {
          return service.getCharacteristic(paramThingy[7].characteristicUUID);
        })
        .then(characteristic => {
          var myCharacteristic = characteristic;
          return myCharacteristic.startNotifications().then(_ => {
            myCharacteristic.addEventListener('characteristicvaluechanged',
                function(event){
                  thingyHandleNotifications(event, paramThingy[7].characteristicName);
                });
          });
        })
        .catch(error => {
          console.log(error);
        });
      }

      // keeps values within the RGB range [0,255]
      function rgbRange(array){
        let res = [];
        for (let i = 0; i < array.length; i++){
          if(array[i] > 255){
            res[i] = 255;
          } else if(array[i] < 0){
            res[i] = 0;
          } else {
            res[i] = array[i];
          }
        }
        return res;
      }

      // Thingy: change the current LED color
      function thingyWriteLEDColorConstant(device, color){
        device.gatt.connect()
        .then(server => {
          return server.getPrimaryService("ef680300-9b35-4933-9b10-52ffa9740042");
        })
        .then(service => {
          return service.getCharacteristic("ef680301-9b35-4933-9b10-52ffa9740042");
        })
        .then(characteristic => {
          let array = rgbRange(color);
          return characteristic.writeValue(Uint8Array.of(1, array[0], array[1], array[2]));
        });
      }


      // Thingy : sound samples
      function thingyWriteSoundSample(device, sample){
        // enable sample mode
        device.gatt.connect()
        .then(server => {
          return server.getPrimaryService("ef680500-9b35-4933-9b10-52ffa9740042");
        })
        .then(service => {
          return service.getCharacteristic("ef680501-9b35-4933-9b10-52ffa9740042");
        })
        .then(characteristic => {
          //sample mode, ADPCM
          characteristic.writeValue(Uint8Array.of(3,1));
          console.log("Written");
        })
        .catch(error => {
        });
        // play sound
        device.gatt.connect()
        .then(server => {
          return server.getPrimaryService("ef680500-9b35-4933-9b10-52ffa9740042");
        })
        .then(service => {
          return service.getCharacteristic("ef680502-9b35-4933-9b10-52ffa9740042");
        })
        .then(characteristic => {
          console.log("Sample: "+sample);
          characteristic.writeValue(Uint8Array.of(sample));
          console.log("Written");
        })
        .catch(error => {
        });
      }

      // variables
      var oldX, oldY, oldZ, lastPressedThingy, lastReleasedThingy;
      var shaken = false, pressed = false;

      // handle notifications (Thingy)
      function thingyHandleNotifications(event, characteristicName){
        if(characteristicName == "Button"){
          if(characteristicName == "Button"){
            // If press
            if(event.target.value.getUint8(0) == 1){
              lastPressedThingy = event.timeStamp;
            }
            // Long press -> upvote
            else if(event.target.value.getUint8(0) == 0){
              if(event.timeStamp - lastPressedThingy > 300 && lastPressedThingy != 0){
                if(!pressed ||Â shaken){
                  $.notify("Up vote !", {className: "success", autoHide: true, autoHideDelay: 3000});
                  ioServer.emit("vote_up", {socket: ioMain, name: "<%= name %>"});
                  pressed = true;
                  shaken = false;
                }
              }
              lastReleasedThingy = event.timeStamp;
            }
          }
        }
        else if (characteristicName == "Gravity vector"){
          let X = new Float32Array(event.target.value.buffer.slice(0,4))[0]; // useless here
          let Y = new Float32Array(event.target.value.buffer.slice(4,8))[0];
          let Z = new Float32Array(event.target.value.buffer.slice(8,12))[0]; // useless here

          // if Thingy shaken -> downvote
          if(oldX != undefined && (Math.abs(oldX-X) >= 8 ||Â Math.abs(oldY-Y) >= 8 || Math.abs(oldZ-Z) >= 8)){
            if(!shaken || pressed){
              $.notify("Down vote !", {className: "success", autoHide: true, autoHideDelay: 3000});
              ioServer.emit("vote_down", {socket: ioMain, name: "<%= name %>"});
              shaken = true;
              pressed = false;
            }
          }
          oldX = X;
          oldY = Y;
          oldZ = Z;
        }
      }
  </script>
  </body>
</html>
